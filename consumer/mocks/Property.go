// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	eriaconsumer "github.com/project-eria/eria-core/consumer"
	mock "github.com/stretchr/testify/mock"
)

// Property is an autogenerated mock type for the Property type
type Property struct {
	mock.Mock
}

// Observe provides a mock function with given fields: listener
func (_m *Property) Observe(listener eriaconsumer.PropertyObserver) (uint16, error) {
	ret := _m.Called(listener)

	if len(ret) == 0 {
		panic("no return value specified for Observe")
	}

	var r0 uint16
	var r1 error
	if rf, ok := ret.Get(0).(func(eriaconsumer.PropertyObserver) (uint16, error)); ok {
		return rf(listener)
	}
	if rf, ok := ret.Get(0).(func(eriaconsumer.PropertyObserver) uint16); ok {
		r0 = rf(listener)
	} else {
		r0 = ret.Get(0).(uint16)
	}

	if rf, ok := ret.Get(1).(func(eriaconsumer.PropertyObserver) error); ok {
		r1 = rf(listener)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UnObserve provides a mock function with given fields: ref
func (_m *Property) UnObserve(ref uint16) error {
	ret := _m.Called(ref)

	if len(ret) == 0 {
		panic("no return value specified for UnObserve")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint16) error); ok {
		r0 = rf(ref)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Value provides a mock function with given fields:
func (_m *Property) Value() (interface{}, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Value")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func() (interface{}, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewProperty creates a new instance of Property. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProperty(t interface {
	mock.TestingT
	Cleanup(func())
}) *Property {
	mock := &Property{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
