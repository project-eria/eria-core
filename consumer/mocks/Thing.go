// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	eriaconsumer "github.com/project-eria/eria-core/consumer"
	mock "github.com/stretchr/testify/mock"
)

// Thing is an autogenerated mock type for the Thing type
type Thing struct {
	mock.Mock
}

// Property provides a mock function with given fields: key, opts
func (_m *Thing) Property(key string, opts ...eriaconsumer.PropertyOption) eriaconsumer.Property {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Property")
	}

	var r0 eriaconsumer.Property
	if rf, ok := ret.Get(0).(func(string, ...eriaconsumer.PropertyOption) eriaconsumer.Property); ok {
		r0 = rf(key, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(eriaconsumer.Property)
		}
	}

	return r0
}

// NewThing creates a new instance of Thing. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewThing(t interface {
	mock.TestingT
	Cleanup(func())
}) *Thing {
	mock := &Thing{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
