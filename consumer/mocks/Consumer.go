// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	eriaconsumer "github.com/project-eria/eria-core/consumer"
	mock "github.com/stretchr/testify/mock"
)

// Consumer is an autogenerated mock type for the Consumer type
type Consumer struct {
	mock.Mock
}

// Thing provides a mock function with given fields: url
func (_m *Consumer) Thing(url string) eriaconsumer.Thing {
	ret := _m.Called(url)

	if len(ret) == 0 {
		panic("no return value specified for Thing")
	}

	var r0 eriaconsumer.Thing
	if rf, ok := ret.Get(0).(func(string) eriaconsumer.Thing); ok {
		r0 = rf(url)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(eriaconsumer.Thing)
		}
	}

	return r0
}

// ThingFromTag provides a mock function with given fields: tag
func (_m *Consumer) ThingFromTag(tag string) eriaconsumer.Thing {
	ret := _m.Called(tag)

	if len(ret) == 0 {
		panic("no return value specified for ThingFromTag")
	}

	var r0 eriaconsumer.Thing
	if rf, ok := ret.Get(0).(func(string) eriaconsumer.Thing); ok {
		r0 = rf(tag)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(eriaconsumer.Thing)
		}
	}

	return r0
}

// NewConsumer creates a new instance of Consumer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConsumer(t interface {
	mock.TestingT
	Cleanup(func())
}) *Consumer {
	mock := &Consumer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
